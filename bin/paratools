#!/usr/bin/env python
"""
Usage:

    paratools CMD [ --help | ... ]

where CMD is one of the following:

    energy              Compute and print total energy in eV
    forces              Compute and print forces in eV/A
    frequencies         Compute frequencies by numerical
                        differentiation of forces

    minimize            minimizes the geometry, default is by BFGS
    dimer               transition state search with eigenmode using
                        dimer method for finding lowest eigenmode
    lanczos             transition state search with eigenmode using
                        lanczos algorithm to find lowest eigenmode
    quasi-newton        Simple quasi Newton approach, with static step
                        restriction

    dimer-rotate        using dimer rotation for finding lowest
                        eigenmode (no update steps for geometry)
    lanczos-rotate      using lanczos algorithm to find lowest
                        eigenmode (as dimer-rotate)

    neb                 Nudged Elastic Band calculation
    ci-neb              Nudged Elastic Band with climbing image
    string              String optimization, similar to NEB
    growingstring
    searchingstring
    ci-string,  ...     climbing image additional to string, works
                        also with growingstring and searchingstring
    path-searcher       Is capable of doing all of the above


    make-path           interpolate a path without optimizing it
    jmol                show interpolated path with jmol

    find-limit-path     Find first appearance where some limits are
                        met in the output logfile
    ts-and-mods         Shows TS estimates and mode vector for a path
    pp2ts-err           see error of ts_estimates of path to real TS
                        (given also as input)
    min-iter            Gives iteration with minimal value from
                        logfile
    compare_geos        compare coordinates of geometry files
    transform-zmatrix   transform zmatrices of other programs into
                        ParaTools format

See subcommand specific help for syntax details.

Examples:

    paratools string --help
    paratools string --calculator default_vasp POSCAR-A POSCAR-B

Search transition path between A and B using default VASP settings.

The following CMDs are for exctracing information from the output:
    plot                gives output to an output file
    show                show output in a pop-up window
    table               gives the data in a table
    xyz                 Prints geometries as xyz stream, only valid
                        together with path or progress as argument for
                        displacement

One has to select what should be displaced by them, thus
the next element for the plot/show/table command needs to
be one of the following:
    path                information from a global path calculation
                        most certainly in path.pickle format
    progress            extract the data from a local transition
                        state method, thus for example dimer or quasi-newton
    xyz                 geometries are given as a xyz-file

See subcommand + input specific help for syntax details.

Examples:

   paratools plot path --help
   paratools plot xyz --dis 1 2 --dis 1 3 XYZ-file

Plots the distances of 1th to 3th atom against the distance of 1th to
2th atom for all the geometries in the XYZ file.
"""
import sys
from ase.optimize import *  # to recognise the optimizers lateron
import pts.tools.findlimitpath
import pts.tools.jmol
import pts.tools.makepath
import pts.tools.pathmin
import pts.tools.pp2tserr
import pts.tools.tsestandmods
import pts.tools.xyz2tabint
import pts.vib
import pts.path_searcher
import pts.tools.compare_geos
import pts.tools.transform_zmt


methods = {
   "path-searcher"   : pts.path_searcher.main  ,
   "path_searcher"   : pts.path_searcher.main  ,
   "frequencies"     : pts.vib.main                  ,
   "find-limit-path" : pts.tools.findlimitpath.main  ,
   "find_limit_path" : pts.tools.findlimitpath.main  ,
   "jmol"            : pts.tools.jmol.main           ,
   "make-path"       : pts.tools.makepath.main       ,
   "make_path"       : pts.tools.makepath.main       ,
   "pp2ts-err"       : pts.tools.pp2tserr.main       ,
   "pp2ts_err"       : pts.tools.pp2tserr.main       ,
   "ts-and-mods"     : pts.tools.tsestandmods.main   ,
   "ts_and_mods"     : pts.tools.tsestandmods.main   ,
   "min_iter"        : pts.tools.pathmin.main   ,
   "min-iter"        : pts.tools.pathmin.main   ,
   "compare_geos"    : pts.tools.compare_geos.main   ,
   "transform-zmatrix" : pts.tools.transform_zmt.main ,
}

def main(argv):
    """Subcommand dispatcher, depending on argv[0] call subcommand
    specific methods. To be used as main(sys.argv[1:]).
    """

    if len(argv) < 1:
        print >> sys.stderr, __doc__
        sys.exit(1)

    # first argument is the keyword for the subtask:
    cmd = argv[0]

    # is this a valid command?
    valid_cmd = False

    # the rest of the command line is delegated to the
    # subtask for interpretation:
    if cmd in ("energy", "forces"):
        valid_cmd = True
        from pts.path_searcher import call_with_pes

        # historically,  command  line  has  to start  with  "--method
        # something":
        argv1 = ["--method"] + argv
        results = call_with_pes(single_point, argv1)
        # print results
        for y in results:
            print y

    if cmd == "minimize":
        valid_cmd = True
        minimize(argv[1:])

    if cmd in ("fopt"):
        valid_cmd = True
        from pts.path_searcher import call_with_pes
        from pts.fopt import minimize
        from pts.qfunc import qmap

        # The default pmap is not parallel:
        def pes_method(pes, path, pmap=qmap, **kw):
            # here only one input geometry is expected:
            # assert len(path) == 1
            return qmap(lambda x: minimize(pes, x, **kw), path)

        # historically,  command  line  has  to start  with  "--method
        # something":
        argv1 = ["--method"] + argv
        results = call_with_pes(pes_method, argv1)
        # print results
        for x, info in results:
            print "# E=", info["value"], \
                "converged =", info["converged"], \
                "in", info["iterations"], "iterations"
            print x

    if cmd in ("string", "neb", "ci-neb", "growingstring", "searchingstring",
               "ci-string", "ci-growingstring", "ci-searchingstring",
               "sopt"):
        valid_cmd = True

        # import right here in order not to import everything,
        # while using only one specific method:
        from pts.path_searcher import main as path_searcher_main

        # prepend a flag for path searcher to understand the method:
        argv1 = ["--method"] + argv
        # print "pts: call path_searcher_main(", argv1, ")"
        path_searcher_main(argv1)

    if cmd in ("quasi-newton", "qn"):
        valid_cmd = True

        # import right here in order not to import everything,
        # while using only one specific method:
        from pts.simple_qn import main as qn

        qn(argv)

    if cmd in ("dimer", "lanczos"):
        valid_cmd = True

        # import right here in order not to import everything,
        # while using only one specific method:
        from pts.dimer import main as ts_search

        # First relevant argument might be special
        # Main expects that the very first element is only about itself
        argv1 = argv + ["--rot_method"] + [argv[0]]

        ts_search(argv1)

    if cmd in ("dimer-rotate", "lanczos-rotate"):
        valid_cmd = True

        # import right here in order not to import everything,
        # while using only one specific method:
        from pts.dimer_rotate import main as rotate

        rot = cmd.split("-")
        # First relevant argument might be special
        # Main expects that the very first element is only about itself
        argv1 = argv + ["--rot_method"] + [rot[0]]

        rotate(argv1)

    if cmd in methods:
        valid_cmd = True
        cmd_main = methods[cmd]
        cmd_main(argv[1:])

    if cmd in ("show", "plot", "table", "xyz"):
        valid_cmd = True

        sort_plotting(argv)

    if not valid_cmd:
        print >> sys.stderr, "pts: no such command:", cmd
        print >> sys.stderr, __doc__
        sys.exit(1)

#
# Example: calculations of energy/forces:
#
def sort_plotting( argv):
    """
    Decides which function should generate the output.
    The output can be a table of data, a plot file
    or go directly on the screen.

    The input (path files, progress files, or a
    xyz file) are given as second argument.
    """
    output = argv[0]
    input = argv[1]

    if input == "energy":
        from pts.tools.path2plot import plot
        # short cut for a special energy plot

        plot(argv )

    elif output == "xyz":
        if input == "path":
            from pts.tools.path2xyz import main
        elif input == "progress":
            from pts.tools.dimer2xyz import main
        else:
            from sys import stderr, exit
            print >> stderr, "ERROR: not allowed plotting combination"
            print >> stderr, " it is not possible to get the output xyz for input", input
            exit()

        main(argv[2:])

    elif output == "table":
        from  pts.tools.path2tab import main
        assert not input == "progress"
        # Gives the output of a path or xyz pickle
        # as a table

        main(input, argv[2:])

    elif input == "mixed":
        from pts.tools.mixedplot import main

        argv2 = []

        if output == "plot":
            argv2 = argv2 + ["--output", "mixed.png"]

        argv2 = argv2 + argv[2:]

        main(argv2)

    elif input == "progress":
        from pts.tools.dimer2plot import main
        # shows the progress of local transition state
        # searching tools like the dimer methods.

        argv2 = []

        if output == "plot":
            argv2 = argv2 + ["--output", "progress.png"]

        argv2 = argv2 + argv[2:]

        main(argv2)

    elif input == "xyz":
        from pts.tools.path2plot import xyz2plot
        # plot or show geometry information of
        # xyz files, might contain more than one
        # geometry in each file.

        argv2 = argv[2:]

        if output == "plot":
            argv2 = ["--output", "xyz.png"] + argv2

        xyz2plot(argv2 )

    elif input == "path":
        from pts.tools.path2plot import main
        # plots or shows the content of a path.pickle file.
        # can display geometries, energy/gradient information
        # or other special values.

        argv2 = argv[2:]

        if output == "plot":
            argv2 = ["--output", "path.png"] + argv2

        main(argv2 )

    else:
        from sys import stderr
        print >> stderr, "ERROR: not allowed plotting combination"
        print >> stderr, " the combination", output, input, " is illegal"


def single_point(pes, geometries, method="energy", pmap=map, **kw):
    """Usage:

        energy --calculator <calculator file> <geometry file 1> [ <geometry file 2> ... ]

    or

        forces --calculator <calculator file> <geometry file 1> [ <geometry file 2> ... ]
    """
    # print "kw=", kw
    from pts.qfunc import qmap # there is something wrong with the default pmap

    # first arg tells what to do:
    if method not in ("energy", "forces"):
        print >> sys.stderr, energy.__doc__
        sys.exit(1)

    if method == "energy":
        # calculate total energy:
        f = pes

    if method == "forces":
        # forces are negative of the gradient:
        f = lambda x: -pes.fprime(x)

    return qmap(f, geometries)

def minimize(argv):
    """
    Usage:

        minimize --calculator <calculator file> <geometry file 1>

    This should  give back  the output of  the minimizer and  the last
    geometry.  This subcommand also accepts the following options:

    --maxit <n>

        Runs maximal n iterations (default is 100).

    --fmax  <fm>

        Is converged if max(f_on_atom) < fmax.

    --optimizer <opt>

        Uses opt  for optimization, opt  can be any of  the optimizers
        specified by ASE, like  LBGFS, BFGS, FIRE, GxOptimizer default
        is  BFGS take  care  that GxOptimizer  needs additional  input
        files.

    --format <format>

        Uses format as input and  output format for the geometry. This
        way  the name of  the input  file can  be arbitrary,  else ASE
        tries  to identify the  format by  the name.  In this  way the
        output geometry will be written into the file output_geometry.

    --atomsmask <mask>

        Only atoms  set True in mask  are optimized.  This  is done by
        reseting steps  and adjusting  forces, thus not  by optimizing
        only in a  subspace.  Note that in most  of the other routines
        masks are used to fix the variables, while in this context the
        atoms are fixed (Thus only one flag for each atom despite 3 in
        the other case).

    --restart <file>

        The  optimizer  (except  GxOptimizer)  have the  option  of  a
        restart file in which they  store data, like the Hessian. This
        data  allows by  a restart  of  the calculation  to take  this
        informations  into  consideration.  Be  aware  that they  will
        still  start with  the  geometry  given to  them  and use  the
        restart file only for  additional informations.  As default no
        such file is build, setting  the restart option they store the
        data  there,  if  it  exist  already  when  they  start  their
        calculation they do a restart.
    """
    from pts.io.cmdline import get_options, get_calculator, get_mask
    from ase.io import read, write
    from ase.constraints import FixAtoms

    if "--help" in argv:
        print minimize.__doc__
        sys.exit()


    opts, args = get_options(argv, long_options=["calculator=","atomsmask=", "optimizer=", "maxit=", "fmax=", "format=", "restart="])

    if len(args) != 1:
        print >> sys.stderr, "There is need of exactly one geometry file"
        print >> sys.stderr, minimize.__doc__
        sys.exit(1)

    # options default values, only calculator has to be overwritten
    mask = None
    maxit = 100
    fmax=0.05
    format = None
    optimizer = BFGS
    calculator = None
    restart = None

    for opt, value in opts:
        if opt == "--calculator":
            calculator = get_calculator(value)
        elif opt == "--maxit":
            maxit = int(value)
        elif opt == "--fmax":
            fmax = float(value)
        elif opt == "--optimizer":
            optimizer = eval("%s" % (value))
        elif opt == "--format":
            format = value
        elif opt == "--restart":
            restart = value
        elif opt == "--atomsmask":
            print "The following atoms will be optimized"
            mask = get_mask(value)
            print mask
            mask = [not ma for ma in mask]

    # this option has to be given!!
    assert calculator != None

    # if a special output is given, use it, else rely on
    # ASE to find it for itself. In principle format = None
    # is also the default case of ASE, thus one would be able
    # to forward it rigthaway. But in case ASE will ever change this
    # we select here explicitly
    if format == None:
        atoms = read(args[0])
    else:
        atoms = read(args[0], format = format)

    # so far only the FixAtoms constraint via a mask is an allowed
    # constraint, be aware that this constraint only works with reseting
    # the variables after an update step
    if mask != None:
       # ASE accects also masks for only some atoms, thus check here if we
       # have something for every atom.
       assert (len(mask) == len(atoms.get_chemical_symbols())), \
           "%s != %s" % (len(mask), len(atoms.get_chemical_symbols()))
       constr = FixAtoms(mask = mask)
       atoms.set_constraint(constr)

    atoms.set_calculator(calculator)

    # the optimizer, setup and run
    # in case ASE changes its default for restart, use it only
    # if it has not our default
    if restart == None:
        dyn = optimizer(atoms)
    else:
        dyn = optimizer(atoms, restart = restart)

    dyn.run(fmax = fmax, steps = maxit)

    # for format see as above, here the standard is to
    # standard output
    if format == None:
        atoms.write("-")
    else:
        atoms.write("output_geometry", format = format)


if __name__ == "__main__":
    main(sys.argv[1:])

# Default options for vim:sw=4:expandtab:smarttab:autoindent:syntax
