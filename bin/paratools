#!/usr/bin/env python
"""
Usage:

    paratools CMD [ --help | ... ]

where CMD is one of the following:

    energy              Compute and print total energy in eV
    forces              Compute and print forces in eV/A
    frequencies         Compute frequencies by numerical
                        differentiation of forces

    minimize            minimizes the geometry, default is
                        by BFGS

    neb                 Nudged Elastic Band calculation
    string              String optimization, similar to NEB
    growingstring
    searchingstring
    path_searcher       Is capable of doing all of the above

    make_path           interpolate a path without optimizing it
    jmol                show interpolated path with jmol

    find_limit_path     Find first appearance where some limits are met
                        in the output logfile
    path2plot           internal coordinate plot for some path
    path2xyz            convert path to xyz file(s)
    xyz2tab             get internal coordinates from xyz-file(s)
    tab2plot            plots a tabular as given by xyz2tab
    ts_and_mods         Shows TS estimates and mode vector for a path
    pp2ts_err           see error of ts_estimates of path to real TS
                        (given also as input)

See subcommand specific help for syntax details.

Examples:

    paratools string --help
    paratools string --calculator default_vasp POSCAR-A POSCAR-B

Search transition path between A and B using default VASP settings.
"""
import sys
from ase.optimize import *  # to recognise the optimizers lateron
import pts.tools.findlimitpath
import pts.tools.jmol
import pts.tools.makepath
import pts.tools.path2plot
import pts.tools.path2xyz
import pts.tools.pp2tserr
import pts.tools.tab2plot
import pts.tools.tsestandmods
import pts.tools.xyz2tabint
import pts.vib
import pts.inputs.pathsearcher

methods = {
   "path_searcher"   : pts.inputs.pathsearcher.main  ,
   "frequencies"     : pts.vib.main                  ,
   "find_limit_path" : pts.tools.findlimitpath.main  ,
   "jmol"            : pts.tools.jmol.main           ,
   "make_path"       : pts.tools.makepath.main       ,
   "path2plot"       : pts.tools.path2plot.main      ,
   "path2xyz"        : pts.tools.path2xyz.main       ,
   "pp2ts_err"       : pts.tools.pp2tserr.main       ,
   "tab2plot"        : pts.tools.tab2plot.main       ,
   "ts_and_mods"     : pts.tools.tsestandmods.main   ,
   "xyz2tab"         : pts.tools.xyz2tabint.main
}

def main(argv):
    """Subcommand dispatcher, depending on argv[0] call subcommand
    specific methods. To be used as main(sys.argv[1:]).
    """

    if len(argv) < 1:
        print >> sys.stderr, __doc__
        sys.exit(1)

    # first argument is the keyword for the subtask:
    cmd = argv[0]

    # is this a valid command?
    valid_cmd = False

    # the rest of the command line is delegated to the
    # subtask for interpretation:
    if cmd in ("energy", "forces"):
        valid_cmd = True

        # print "pts: call single_point(", argv[1:], ")"
        single_point(argv)

    if cmd == "minimize":
        valid_cmd = True
        minimize(argv[1:])

    if cmd in ("string", "neb", "growingstring", "searchingstring"):
        valid_cmd = True

        # import right here in order not to import everything,
        # while using only one specific method:
        from pts.inputs.pathsearcher import main as pathsearcher

        # prepend a flag for pathsearcher to understand the method:
        argv1 = ["--method"] + argv
        # print "pts: call pathsearcher(", argv1, ")"
        pathsearcher(argv1)

    if cmd in methods.keys():
        valid_cmd = True
        cmd_main = methods[cmd]
        cmd_main(argv[1:])

    if not valid_cmd:
        print >> sys.stderr, "pts: no such command:", cmd
        print >> sys.stderr, __doc__
        sys.exit(1)

#
# Example: calculations of energy/forces:
#
def single_point(argv):
    """Usage:

        energy --calculator <calculator file> <geometry file 1> [ <geometry file 2> ... ]

    or

        forces --calculator <calculator file> <geometry file 1> [ <geometry file 2> ... ]
    """
    from pts.cmdline import get_options, get_calculator
    import ase

    # first arg tells what to do:
    if argv[0] not in ("energy", "forces"):
        print >> sys.stderr, energy.__doc__
        sys.exit(1)

    # accepts only one option (so far):
    opts, args = get_options(argv[1:], long_options=["calculator="])

    # and one or more files molecular files:
    if len(args) < 1:
        print >> sys.stderr, energy.__doc__
        sys.exit(1)

    assert opts[0][0] == "--calculator"

    calculator = get_calculator(opts[0][1])

    for file in args:
        atoms = ase.io.read(file)
        # print atoms.get_positions()
        atoms.set_calculator(calculator)

        if argv[0] == "energy":
            # calculate total energy:
            e = atoms.get_potential_energy()

            # print results to stdout
            print e

        if argv[0] == "forces":
            # calculate total energy:
            f = atoms.get_forces()

            # print results to stdout
            print f
            print "" # separate blocks by a new line

def minimize(argv):
    """
    Usage:
        minimize --calculator <calculator file> <geometry file 1>

    Gives back the output of the minimizer and the last geometry.

    accepts also the options:
        --maxit <n>: runs maximal n iterations (default is 100)
        --fmax  <fm>: is converged if max(f_on_atom) < fmax
        --optimizer <opt>: uses opt for optimization, opt can be any of the optimizers
                           specified by ASE, like LBGFS, BFGS, FIRE, GxOptimizer
                           default is BFGS
                           take care that GxOptimizer needs additional input files
        --format <format>: uses format as input and output format for the geometry. This way the name
                           of the input file can be arbitrary, else ASE tries to identify the format by
                           the name. In this way the output geometry will be written into the file
                           output_geometry
        --atommask <mask> : only atoms set True in mask are optimized. This is done by reseting steps
                            and adjusting forces, thus not by optimizing only in a subspace.
                            Note that in most of the other routines masks are used to fix the variables,
                            while in this context the atoms are fixed (Thus only one flag for each atom
                            despite 3 in the other case)
    """
    from pts.cmdline import get_options, get_calculator, get_mask
    from ase.io import read, write
    from ase.constraints import FixAtoms

    if "--help" in argv:
        print minimize.__doc__
        sys.exit()


    opts, args = get_options(argv, long_options=["calculator=","atomsmask=", "optimizer=", "maxit=", "fmax=", "format="])

    if len(args) != 1:
        print >> sys.stderr, "There is need of exactly one geometry file"
        print >> sys.stderr, minimize.__doc__
        sys.exit(1)

    # options default values, only calculator has to be overwritten
    mask = None
    maxit = 100
    fmax=0.05
    format = None
    optimizer = BFGS
    calculator = None

    for opt, value in opts:
        if opt == "--calculator":
            calculator = get_calculator(value)
        elif opt == "--maxit":
            maxit = int(value)
        elif opt == "--fmax":
            fmax = float(value)
        elif opt == "--optimizer":
            optimizer = eval("%s" % (value))
        elif opt == "--format":
            format = value
        elif opt == "--atomsmask":
            print "The following atoms were fixed"
            mask = get_mask(value)

    # this option has to be given!!
    assert calculator != None

    # if a special output is given, use it, else rely on
    # ASE to find it for itself. In principle format = None
    # is also the default case of ASE, thus one would be able
    # to forward it rigthaway. But in case ASE will ever change this
    # we select here explicitly
    if format == None:
        atoms = read(args[0])
    else:
        atoms = read(args[0], format = format)

    # so far only the FixAtoms constraint via a mask is an allowed
    # constraint, be aware that this constraint only works with reseting
    # the variables after an update step
    if mask != None:
       constr = FixAtoms(mask = mask)
       atoms.set_constraint(constr)

    atoms.set_calculator(calculator)

    # the optimizer, setup and run
    dyn = optimizer(atoms)
    dyn.run(fmax = fmax, steps = maxit)

    # for format see as above, here the standard is to
    # standard output
    if format == None:
        atoms.write("-")
    else:
        atoms.write("output_geometry", format = format)


if __name__ == "__main__":
    main(sys.argv[1:])

# Default options for vim:sw=4:expandtab:smarttab:autoindent:syntax
