#!/usr/bin/python
"""
Usage:

    aof CMD [ --help | ... ]

where CMD is one of the following:

    energy              Compute and print total energy in eV
    forces              Compute and print forces in eV/A
    frequencies         Compute frequencies by numerical
                        differentiation of forces

    neb                 Nudged Elastic Band calculation
    string              String optimization, similar to NEB
    growingstring
    searchingstring
    pathsearcher        Is capable of doing all of the above

See subcommand specific help for syntax details.

Examples:

    aof string --help
    aof string --calculator default_vasp POSCAR-A POSCAR-B

Search transition path between A and B using default VASP settings.
"""
import sys

def main(argv):
    """Subcommand dispatcher, depending on argv[0] call subcommand
    specific methods. To be used as main(sys.argv[1:]).
    """

    if len(argv) < 1:
        print >> sys.stderr, __doc__
        sys.exit(1)

    # first argument is the keyword for the subtask:
    cmd = argv[0]

    # is this a valid command?
    valid_cmd = False

    # the rest of the command line is delegated to the
    # subtask for interpretation:
    if cmd in ("energy", "forces"):
        valid_cmd = True

        # print "aof: call single_point(", argv[1:], ")"
        single_point(argv)

    if cmd in ("string", "neb", "growingstring", "searchingstring"):
        valid_cmd = True

        # import right here in order not to import everything,
        # while using only one specific method:
        from aof.inputs.pathsearcher import main as pathsearcher

        # prepend a flag for pathsearcher to understand the method:
        argv1 = ["--cos_type"] + argv
        # print "aof: call pathsearcher(", argv1, ")"
        pathsearcher(argv1)

    if cmd == "pathsearcher":
        valid_cmd = True

        from aof.inputs.pathsearcher import main as pathsearcher
        # print "aof: call pathsearcher(", argv[1:], ")"
        pathsearcher(argv[1:])

    if cmd == "frequencies":
        valid_cmd = True

        from aof.vib import main as frequencies
        # print "aof: call frequencies(", argv[1:], ")"
        frequencies(argv[1:])

    if not valid_cmd:
        print >> sys.stderr, "aof: no such command:", cmd
        print >> sys.stderr, __doc__
        sys.exit(1)

#
# Example: calculations of energy/forces:
#
def single_point(argv):
    """Usage:

        energy --calculator <calculator file> <geometry file 1> [ <geometry file 2> ... ]

    or

        forces --calculator <calculator file> <geometry file 1> [ <geometry file 2> ... ]
    """
    from aof.cmdline import get_options, get_calculator
    import ase

    # first arg tells what to do:
    if argv[0] not in ("energy", "forces"):
        print >> sys.stderr, energy.__doc__
        sys.exit(1)

    # accepts only one option (so far):
    opts, args = get_options(argv[1:], long_options=["calculator="])

    # and one or more files molecular files:
    if len(args) < 1:
        print >> sys.stderr, energy.__doc__
        sys.exit(1)

    assert opts[0][0] == "--calculator"

    calculator = get_calculator(opts[0][1])

    for file in args:
        atoms = ase.read(file)
        # print atoms.get_positions()
        atoms.set_calculator(calculator)

        if argv[0] == "energy":
            # calculate total energy:
            e = atoms.get_potential_energy()

            # print results to stdout
            print e

        if argv[0] == "forces":
            # calculate total energy:
            f = atoms.get_forces()

            # print results to stdout
            print f
            print "" # separate blocks by a new line

if __name__ == "__main__":
    main(sys.argv[1:])

# Default options for vim:sw=4:expandtab:smarttab:autoindent:syntax
