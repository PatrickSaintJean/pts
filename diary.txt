02/04/2009
----------

TODO
 - print / read new papers
 - see what happens with numpy bfgs minimiser when linesearch is removed

 08/04/2009
 ----------

  - Why do they use a runge kutta method to solve the equations when all they 
    want to do is minimise withing a trust region?
  - Is it because it becomes tricky when you have a multidimentional function?

17/04/2009
----------

 - string starts going crazy after a few macro iterations.
 - could be because the hessian is getting confused after it gets updated 
   based on gradient from re-spaced points.
 - will the methods described in the paper fix this?
 - *** mostly fixed by makign trust radius better
 - *** remaining problem seems to be that some points move far slower than 
   others, causing kinks in the string
 
20/04/2009
----------
 - above problem fixed by using adaptive step sizes

Tasks / wish list
----------
 - implement final parts of QSM
 - investigate OpenBabel and cclib (DONE)
 - implement calc queueing, remembering and multithreading (DONE)
 - improve logging / error reporting (DONE for sched.py)
 - get code to use new scheduler (DONE - need to test)
 - test NEB again (DONE)
 - compare SciPy BFGS optimiser with mine
 - test growing string with QSM (DONE)
 - implement test for oscillating string/band
 - test on other potentials
 - uniform interface for searchers

12/06/2009
----------
 - need to implement: mol_interface.get_reagent_coords()
 - also convert relevant functions in mol_interface to operate on an arbitrary list of input molecules

15/06/2009
----------
 - Program runs but seg faults (in Fortan code) when using the l_bfgs_b solver 
   and has (normal(?)) problem when using standard bfgs solver.
 - todo next:
   - try using simple gradient descent (DONE)
   - try using dummy qchem driver, i.e. analytical potential
   - check units for gradients, etc. (DONE [i think])
   - look at paper for Fast Marching Method... esp. interpolation method

16/06/2009
----------
 - discovered problem with forces, usual sign problem i.e. grads = -1*forces
 - seems to work with simple gradient descent
 - TODO:
   - see above

25/06/2009
----------
 - for some reason:
   - when the openbabel python module is loaded, the l_bfgs_b solver crashes 
      with a segmentation fault.
      TODO: test if it crashes when openbabel is loaded in my molinterface.py code
 - l_bfgs_b cannot find as good a minimum as the gradient descent solver
   TODO: check if this was the same when running test_NEB()

 - 
